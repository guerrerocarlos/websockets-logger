{"version":3,"sources":["../src/index.ts"],"sourcesContent":["const LOG_LEVELS = ['log', 'info', 'warn', 'error', 'debug'] as const;\nexport type LogLevel = typeof LOG_LEVELS[number];\n\nexport type ConnectionState = 'connecting' | 'connected' | 'disconnected';\n\ntype WebSocketEventName = 'open' | 'close' | 'error' | 'message';\ntype WebSocketEventListener = (event: unknown) => void;\n\nexport interface LogMessage {\n    timestamp: string;\n    level: LogLevel;\n    message: string;\n    data?: unknown[];\n    source: string;\n    requestId?: string;\n    context?: Record<string, unknown>;\n}\n\nexport interface WebSocketLike {\n    send(data: string): void;\n    close(code?: number, reason?: string): void;\n    addEventListener?(event: WebSocketEventName, listener: WebSocketEventListener): void;\n    removeEventListener?(event: WebSocketEventName, listener: WebSocketEventListener): void;\n    on?(event: WebSocketEventName, listener: WebSocketEventListener): void;\n    off?(event: WebSocketEventName, listener: WebSocketEventListener): void;\n    removeListener?(event: WebSocketEventName, listener: WebSocketEventListener): void;\n    once?(event: WebSocketEventName, listener: WebSocketEventListener): void;\n    readyState?: number;\n}\n\nexport type WebSocketFactory = (url: string) => WebSocketLike;\n\nexport interface WebSocketLoggerOptions {\n    wsUrl: string;\n    source?: string;\n    topic?: string;\n    subscriptionTopic?: string;\n    enableConsole?: boolean;\n    bufferMessages?: boolean;\n    maxBufferSize?: number;\n    reconnectInterval?: number;\n    onConnectionChange?: (state: ConnectionState) => void;\n    onMessage?: (message: unknown, rawEvent: unknown) => void;\n    webSocketFactory?: WebSocketFactory;\n    initialContext?: Record<string, unknown>;\n}\n\nexport interface InitializeWebSocketLoggerOptions extends WebSocketLoggerOptions {\n    patchConsole?: boolean;\n    consoleLevels?: LogLevel[];\n    consolePassthrough?: boolean;\n}\n\ninterface NormalizedOptions {\n    wsUrl: string;\n    source: string;\n    topic: string;\n    subscriptionTopic: string;\n    enableConsole: boolean;\n    bufferMessages: boolean;\n    maxBufferSize: number;\n    reconnectInterval: number;\n    onConnectionChange?: (state: ConnectionState) => void;\n    onMessage?: (message: unknown, rawEvent: unknown) => void;\n    webSocketFactory: WebSocketFactory;\n}\n\ntype ListenerCleanup = () => void;\nconst globalScope = globalThis as typeof globalThis & {\n    location?: { hostname?: string };\n    process?: { pid?: number };\n    WebSocket?: new (url: string, protocols?: string | string[]) => WebSocketLike;\n};\n\nfunction randomSuffix() {\n    return Math.random().toString(36).slice(2, 10);\n}\n\nfunction createDefaultSource() {\n    if (globalScope?.location?.hostname) {\n        return `${globalScope.location.hostname}-${randomSuffix()}`;\n    }\n    if (globalScope?.process?.pid) {\n        return `node-${globalScope.process.pid}-${randomSuffix()}`;\n    }\n    return `client-${randomSuffix()}`;\n}\n\nfunction defaultWebSocketFactory(url: string): WebSocketLike {\n    const NativeWebSocket = globalScope?.WebSocket;\n    if (typeof NativeWebSocket === 'function') {\n        return new NativeWebSocket(url);\n    }\n    throw new Error('No global WebSocket implementation found. Provide options.webSocketFactory.');\n}\n\nfunction sanitizeValue(value: unknown, seen: WeakSet<object> = new WeakSet()): unknown {\n    if (value === null) {\n        return null;\n    }\n\n    const valueType = typeof value;\n\n    if (valueType === 'function') {\n        const fn = value as (...args: unknown[]) => unknown;\n        return `[Function${fn.name ? `: ${fn.name}` : ''}]`;\n    }\n\n    if (valueType === 'symbol') {\n        return value instanceof Symbol ? value.toString() : String(value);\n    }\n\n    if (valueType !== 'object') {\n        return value;\n    }\n\n    const objectValue = value as Record<string, unknown>;\n\n    if (seen.has(objectValue)) {\n        return '[Circular]';\n    }\n\n    seen.add(objectValue);\n\n    if (Array.isArray(objectValue)) {\n        const result = objectValue.map((item) => sanitizeValue(item, seen));\n        seen.delete(objectValue);\n        return result;\n    }\n\n    const result: Record<string, unknown> = {};\n    for (const [key, nestedValue] of Object.entries(objectValue)) {\n        result[key] = sanitizeValue(nestedValue, seen);\n    }\n\n    seen.delete(objectValue);\n    return result;\n}\n\nfunction formatArg(arg: unknown): string {\n    if (typeof arg === 'string') {\n        return arg;\n    }\n\n    if (arg instanceof Error) {\n        return arg.stack || arg.message || arg.toString();\n    }\n\n    try {\n        return JSON.stringify(sanitizeValue(arg));\n    } catch {\n        return String(arg);\n    }\n}\n\nfunction createMessageString(args: unknown[]): string {\n    return args.map(formatArg).join(' ');\n}\n\nfunction attachListener(ws: WebSocketLike, event: WebSocketEventName, handler: WebSocketEventListener): ListenerCleanup {\n    if (typeof ws.addEventListener === 'function' && typeof ws.removeEventListener === 'function') {\n        ws.addEventListener(event, handler);\n        return () => ws.removeEventListener?.(event, handler);\n    }\n\n    if (typeof ws.on === 'function') {\n        ws.on(event, handler);\n        return () => {\n            if (typeof ws.off === 'function') {\n                ws.off(event, handler);\n            } else if (typeof ws.removeListener === 'function') {\n                ws.removeListener(event, handler);\n            }\n        };\n    }\n\n    return () => {};\n}\n\nfunction normalizeOptions(options: WebSocketLoggerOptions): NormalizedOptions {\n    const source = options.source ?? createDefaultSource();\n\n    return {\n        wsUrl: options.wsUrl,\n        source,\n        topic: options.topic ?? 'logs',\n        subscriptionTopic: options.subscriptionTopic ?? source,\n        enableConsole: options.enableConsole ?? true,\n        bufferMessages: options.bufferMessages ?? true,\n        maxBufferSize: options.maxBufferSize ?? 100,\n        reconnectInterval: options.reconnectInterval ?? 5000,\n        onConnectionChange: options.onConnectionChange,\n        onMessage: options.onMessage,\n        webSocketFactory: options.webSocketFactory ?? defaultWebSocketFactory,\n    };\n}\n\nexport class WebSocketLogger {\n    private ws: WebSocketLike | null = null;\n    private readonly options: NormalizedOptions;\n    private readonly messageBuffer: LogMessage[] = [];\n    private reconnectTimer: ReturnType<typeof setTimeout> | null = null;\n    private isConnected = false;\n    private manualClose = false;\n    private requestId: string | null = null;\n    private context: Record<string, unknown>;\n    private eventUnsubscribers: ListenerCleanup[] = [];\n    private readonly consoleMethods: Record<LogLevel, (...args: unknown[]) => void>;\n\n    constructor(options: WebSocketLoggerOptions) {\n        this.options = normalizeOptions(options);\n        this.context = { ...(options.initialContext ?? {}) };\n        this.consoleMethods = {\n            log: console.log.bind(console),\n            info: console.info.bind(console),\n            warn: console.warn.bind(console),\n            error: console.error.bind(console),\n            debug: (console.debug ?? console.log).bind(console),\n        };\n\n        this.connect();\n    }\n\n    private connect() {\n        this.manualClose = false;\n        this.notifyConnection('connecting');\n\n        try {\n            const ws = this.options.webSocketFactory(this.options.wsUrl);\n            this.ws = ws;\n\n            this.eventUnsubscribers = [\n                attachListener(ws, 'open', this.handleOpen),\n                attachListener(ws, 'close', this.handleClose),\n                attachListener(ws, 'error', this.handleError),\n                attachListener(ws, 'message', this.handleMessage),\n            ];\n        } catch (error) {\n            this.logInternal('error', 'Failed to create WebSocket connection:', error);\n            this.scheduleReconnect();\n        }\n    }\n\n    private handleOpen = () => {\n        this.isConnected = true;\n        this.logInternal('info', 'WebSocket logger connected');\n        this.sendSubscription();\n        this.flushBuffer();\n        this.clearReconnectTimer();\n        this.notifyConnection('connected');\n    };\n\n    private handleClose = () => {\n        this.isConnected = false;\n        this.cleanupWebSocket();\n        this.logInternal('warn', 'WebSocket logger disconnected');\n        this.notifyConnection('disconnected');\n        this.scheduleReconnect();\n    };\n\n    private handleError = (event: unknown) => {\n        this.isConnected = false;\n        this.logInternal('error', 'WebSocket logger error:', event);\n        this.notifyConnection('disconnected');\n        this.scheduleReconnect();\n    };\n\n    private handleMessage = (event: unknown) => {\n        if (!this.options.onMessage) {\n            return;\n        }\n\n        const data = (event && typeof event === 'object' && 'data' in (event as Record<string, unknown>))\n            ? (event as Record<string, unknown>).data\n            : event;\n\n        this.options.onMessage(data, event);\n    };\n\n    private notifyConnection(state: ConnectionState) {\n        this.options.onConnectionChange?.(state);\n    }\n\n    private logInternal(level: LogLevel, ...args: unknown[]) {\n        if (!this.options.enableConsole) {\n            return;\n        }\n\n        this.consoleMethods[level](...args);\n    }\n\n    private sendSubscription() {\n        const payload = {\n            clientId: this.options.source,\n            action: 'subscribe',\n            topic: this.options.subscriptionTopic,\n        };\n\n        this.safeSend(payload);\n    }\n\n    private flushBuffer() {\n        if (!this.isConnected) {\n            return;\n        }\n\n        while (this.messageBuffer.length > 0) {\n            const message = this.messageBuffer.shift();\n            if (message) {\n                this.safeSendLogMessage(message);\n            }\n        }\n    }\n\n    private safeSendLogMessage(logMessage: LogMessage) {\n        const payload = {\n            topic: this.options.topic,\n            value: logMessage,\n            clientId: this.options.source,\n        };\n\n        this.safeSend(payload);\n    }\n\n    private safeSend(payload: unknown) {\n        if (!this.isConnected || !this.ws) {\n            return;\n        }\n\n        try {\n            const sanitized = sanitizeValue(payload);\n            this.ws.send(JSON.stringify(sanitized));\n        } catch (error) {\n            this.logInternal('error', 'Failed to send WebSocket message:', error);\n        }\n    }\n\n    private scheduleReconnect() {\n        if (this.manualClose) {\n            return;\n        }\n\n        if (this.reconnectTimer || this.options.reconnectInterval <= 0) {\n            return;\n        }\n\n        this.reconnectTimer = setTimeout(() => {\n            this.reconnectTimer = null;\n            if (!this.manualClose) {\n                this.connect();\n            }\n        }, this.options.reconnectInterval);\n    }\n\n    private clearReconnectTimer() {\n        if (!this.reconnectTimer) {\n            return;\n        }\n        clearTimeout(this.reconnectTimer);\n        this.reconnectTimer = null;\n    }\n\n    private cleanupWebSocket(forceClose = false) {\n        if (this.ws) {\n            if (forceClose) {\n                try {\n                    this.ws.close();\n                } catch {\n                    // ignore close errors\n                }\n            }\n        }\n\n        if (this.eventUnsubscribers.length > 0) {\n            for (const unsubscribe of this.eventUnsubscribers) {\n                try {\n                    unsubscribe();\n                } catch {\n                    // ignore unsubscribe errors\n                }\n            }\n            this.eventUnsubscribers = [];\n        }\n\n        this.ws = null;\n    }\n\n    private createLogMessage(level: LogLevel, args: unknown[]): LogMessage {\n        const sanitizedArgs = args.map((arg) => sanitizeValue(arg));\n        const includeFirstArg = args.length === 1 && typeof args[0] !== 'string';\n        const dataCandidates = includeFirstArg ? sanitizedArgs : sanitizedArgs.slice(1);\n\n        const message: LogMessage = {\n            timestamp: new Date().toISOString(),\n            level,\n            message: createMessageString(args),\n            source: this.options.source,\n        };\n\n        if (this.requestId) {\n            message.requestId = this.requestId;\n        }\n\n        if (dataCandidates.length > 0) {\n            message.data = dataCandidates;\n        }\n\n        if (Object.keys(this.context).length > 0) {\n            message.context = { ...this.context };\n        }\n\n        return message;\n    }\n\n    private write(level: LogLevel, args: unknown[]) {\n        const logMessage = this.createLogMessage(level, args);\n        if (this.isConnected && this.ws) {\n            this.safeSendLogMessage(logMessage);\n        } else if (this.options.bufferMessages) {\n            this.messageBuffer.push(logMessage);\n            if (this.messageBuffer.length > this.options.maxBufferSize) {\n                this.messageBuffer.shift();\n            }\n        }\n\n        this.logInternal(level, ...args);\n    }\n\n    setRequestId(requestId: string | null) {\n        this.requestId = requestId;\n    }\n\n    clearRequestId() {\n        this.requestId = null;\n    }\n\n    setContext(context: Record<string, unknown>) {\n        this.context = { ...context };\n    }\n\n    updateContext(context: Record<string, unknown>) {\n        this.context = { ...this.context, ...context };\n    }\n\n    clearContext(keys?: string[]) {\n        if (!keys) {\n            this.context = {};\n            return;\n        }\n\n        for (const key of keys) {\n            delete this.context[key];\n        }\n    }\n\n    log(...args: unknown[]) {\n        this.write('log', args);\n    }\n\n    error(...args: unknown[]) {\n        this.write('error', args);\n    }\n\n    warn(...args: unknown[]) {\n        this.write('warn', args);\n    }\n\n    info(...args: unknown[]) {\n        this.write('info', args);\n    }\n\n    debug(...args: unknown[]) {\n        this.write('debug', args);\n    }\n\n    reconnect() {\n        this.manualClose = false;\n        this.clearReconnectTimer();\n        this.cleanupWebSocket(true);\n        this.connect();\n    }\n\n    close() {\n        this.manualClose = true;\n        this.clearReconnectTimer();\n        this.cleanupWebSocket(true);\n        this.isConnected = false;\n        this.notifyConnection('disconnected');\n    }\n\n    get connected() {\n        return this.isConnected;\n    }\n\n    get bufferedMessageCount() {\n        return this.messageBuffer.length;\n    }\n\n    get loggerOptions(): Readonly<NormalizedOptions> {\n        return { ...this.options };\n    }\n}\n\nlet globalLogger: WebSocketLogger | null = null;\nlet activeConsoleRestore: (() => void) | null = null;\n\nexport interface PatchConsoleOptions {\n    logger?: WebSocketLogger;\n    levels?: LogLevel[];\n    passthrough?: boolean;\n}\n\nexport function patchConsole(options: PatchConsoleOptions = {}): () => void {\n    const logger = options.logger ?? globalLogger;\n    if (!logger) {\n        throw new Error('No WebSocketLogger available to patch console. Initialize one or pass it explicitly.');\n    }\n\n    const levels = options.levels ?? [...LOG_LEVELS];\n    const passthrough = options.passthrough ?? false;\n    const consoleRef = console as unknown as Record<LogLevel, (...args: unknown[]) => void>;\n    const originals: Partial<Record<LogLevel, (...args: unknown[]) => void>> = {};\n\n    for (const level of levels) {\n        const original = consoleRef[level]?.bind(console);\n        originals[level] = original;\n        consoleRef[level] = (...args: unknown[]) => {\n            logger[level](...args);\n            if (passthrough && original) {\n                original(...args);\n            }\n        };\n    }\n\n    const restore = () => {\n        for (const level of levels) {\n            const original = originals[level];\n            if (original) {\n                consoleRef[level] = original;\n            }\n        }\n    };\n\n    activeConsoleRestore?.();\n    activeConsoleRestore = restore;\n\n    return restore;\n}\n\nexport function unpatchConsole() {\n    if (activeConsoleRestore) {\n        activeConsoleRestore();\n        activeConsoleRestore = null;\n    }\n}\n\nexport function initializeWebSocketLogger(options: InitializeWebSocketLoggerOptions): WebSocketLogger {\n    const {\n        patchConsole: shouldPatchConsole = false,\n        consoleLevels,\n        consolePassthrough,\n        ...rest\n    } = options;\n\n    if (globalLogger) {\n        globalLogger.close();\n    }\n\n    const loggerOptions: WebSocketLoggerOptions = {\n        ...rest,\n        enableConsole: rest.enableConsole ?? !shouldPatchConsole,\n    };\n\n    const logger = new WebSocketLogger(loggerOptions);\n    globalLogger = logger;\n\n    if (shouldPatchConsole) {\n        const passthrough = consolePassthrough ?? Boolean(loggerOptions.enableConsole);\n        patchConsole({\n            logger,\n            levels: consoleLevels,\n            passthrough,\n        });\n    }\n\n    return logger;\n}\n\nexport function getWebSocketLogger(): WebSocketLogger | null {\n    return globalLogger;\n}\n\nexport const wsLog = {\n    log: (...args: unknown[]) => {\n        if (globalLogger) {\n            globalLogger.log(...args);\n        } else {\n            console.log(...args);\n        }\n    },\n    error: (...args: unknown[]) => {\n        if (globalLogger) {\n            globalLogger.error(...args);\n        } else {\n            console.error(...args);\n        }\n    },\n    warn: (...args: unknown[]) => {\n        if (globalLogger) {\n            globalLogger.warn(...args);\n        } else {\n            console.warn(...args);\n        }\n    },\n    info: (...args: unknown[]) => {\n        if (globalLogger) {\n            globalLogger.info(...args);\n        } else {\n            console.info(...args);\n        }\n    },\n    debug: (...args: unknown[]) => {\n        if (globalLogger) {\n            globalLogger.debug(...args);\n        } else {\n            (console.debug ?? console.log)(...args);\n        }\n    },\n    setRequestId: (requestId: string | null) => {\n        if (!globalLogger) {\n            return;\n        }\n        if (requestId) {\n            globalLogger.setRequestId(requestId);\n        } else {\n            globalLogger.clearRequestId();\n        }\n    },\n    setContext: (context: Record<string, unknown>) => {\n        globalLogger?.setContext(context);\n    },\n    updateContext: (context: Record<string, unknown>) => {\n        globalLogger?.updateContext(context);\n    },\n    clearContext: (keys?: string[]) => {\n        globalLogger?.clearContext(keys);\n    },\n};\n\nexport default WebSocketLogger;\n"],"mappings":"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","names":["result"]}